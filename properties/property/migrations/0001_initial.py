# Generated by Django 5.2.4 on 2025-07-04 11:45

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Amenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('icon', models.CharField(blank=True, max_length=50, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Property',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('property_type', models.CharField(choices=[('LAND', 'Land'), ('RENTAL', 'Rental'), ('APARTMENT', 'Apartment'), ('HOSTEL', 'Campus Hostel')], max_length=20)),
                ('price', models.DecimalField(decimal_places=2, max_digits=12, validators=[django.core.validators.MinValueValidator(0)])),
                ('price_period', models.CharField(choices=[('ONETIME', 'One-time'), ('DAILY', 'Daily'), ('WEEKLY', 'Weekly'), ('MONTHLY', 'Monthly'), ('YEARLY', 'Yearly')], default='ONETIME', max_length=20)),
                ('is_available', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('featured', models.BooleanField(default=False)),
                ('views', models.PositiveIntegerField(default=0)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='properties', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Properties',
                'ordering': ['-date_created'],
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.CharField(max_length=100)),
                ('region', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('district', models.CharField(blank=True, max_length=100, null=True)),
                ('street', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'unique_together': {('country', 'region', 'city', 'district', 'street')},
            },
        ),
        migrations.CreateModel(
            name='Apartment',
            fields=[
                ('property', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='property.property')),
                ('apartment_type', models.CharField(choices=[('STUDIO', 'Studio'), ('1BED', '1 Bedroom'), ('2BED', '2 Bedrooms'), ('3BED', '3 Bedrooms'), ('PENTHOUSE', 'Penthouse'), ('DUPLEX', 'Duplex')], max_length=20)),
                ('bedrooms', models.PositiveIntegerField()),
                ('bathrooms', models.PositiveIntegerField()),
                ('floor_number', models.PositiveIntegerField()),
                ('total_floors', models.PositiveIntegerField()),
                ('furnished', models.BooleanField(default=False)),
                ('parking_available', models.BooleanField(default=False)),
                ('year_built', models.PositiveIntegerField(blank=True, null=True)),
                ('building_name', models.CharField(blank=True, max_length=100, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CampusHostel',
            fields=[
                ('property', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='property.property')),
                ('hostel_type', models.CharField(choices=[('MALE', 'Male Hostel'), ('FEMALE', 'Female Hostel'), ('MIXED', 'Mixed Hostel')], max_length=20)),
                ('room_type', models.CharField(choices=[('SINGLE', 'Single Room'), ('SHARED', 'Shared Room'), ('DORM', 'Dormitory')], max_length=20)),
                ('capacity', models.PositiveIntegerField()),
                ('meals_included', models.BooleanField(default=False)),
                ('distance_to_campus', models.DecimalField(decimal_places=2, max_digits=5)),
                ('curfew_time', models.TimeField(blank=True, null=True)),
                ('has_laundry', models.BooleanField(default=False)),
                ('has_study_room', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Land',
            fields=[
                ('property', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='property.property')),
                ('land_type', models.CharField(choices=[('RESIDENTIAL', 'Residential'), ('COMMERCIAL', 'Commercial'), ('AGRICULTURAL', 'Agricultural'), ('INDUSTRIAL', 'Industrial'), ('OTHER', 'Other')], max_length=20)),
                ('area', models.DecimalField(decimal_places=2, max_digits=10)),
                ('zoning', models.CharField(blank=True, max_length=100, null=True)),
                ('has_utilities', models.BooleanField(default=False)),
                ('topographical_features', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Rental',
            fields=[
                ('property', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='property.property')),
                ('rental_type', models.CharField(choices=[('HOUSE', 'House'), ('TOWNHOUSE', 'Townhouse'), ('VILLA', 'Villa'), ('COTTAGE', 'Cottage'), ('OTHER', 'Other')], max_length=20)),
                ('bedrooms', models.PositiveIntegerField()),
                ('bathrooms', models.PositiveIntegerField()),
                ('floors', models.PositiveIntegerField(default=1)),
                ('furnished', models.BooleanField(default=False)),
                ('parking_spaces', models.PositiveIntegerField(default=0)),
                ('year_built', models.PositiveIntegerField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Inquiry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('contact_phone', models.CharField(blank=True, max_length=20, null=True)),
                ('contact_email', models.EmailField(blank=True, max_length=254, null=True)),
                ('date_sent', models.DateTimeField(auto_now_add=True)),
                ('responded', models.BooleanField(default=False)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inquiries', to='property.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Inquiries',
                'ordering': ['-date_sent'],
            },
        ),
        migrations.AddField(
            model_name='property',
            name='location',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.location'),
        ),
        migrations.CreateModel(
            name='PropertyAmenity',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.CharField(blank=True, max_length=100, null=True)),
                ('amenity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.amenity')),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.property')),
            ],
            options={
                'verbose_name_plural': 'Property amenities',
                'unique_together': {('property', 'amenity')},
            },
        ),
        migrations.AddField(
            model_name='property',
            name='amenities',
            field=models.ManyToManyField(related_name='properties', through='property.PropertyAmenity', to='property.amenity'),
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='property_images/')),
                ('is_featured', models.BooleanField(default=False)),
                ('caption', models.CharField(blank=True, max_length=100, null=True)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='property.property')),
            ],
        ),
        migrations.CreateModel(
            name='Favorite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_added', models.DateTimeField(auto_now_add=True)),
                ('property', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='property.property')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='favorites', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date_added'],
                'unique_together': {('user', 'property')},
            },
        ),
    ]
